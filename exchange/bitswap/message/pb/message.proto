package bitswap.message.pb;

message Message {

  message Wantlist {

    message Entry {
      optional string block = 1;    // the block cid (cidV0 in bitswap 1.0.0, cidV1 in bitswap 1.1.0)
      optional int32 priority = 2;  // the priority (normalized). default to 1
      optional bool cancel = 3;     // whether this revokes an entry (in havelist mean block lost)
      
      optional uint64 offset = 4;   // offset in block (only in sendlist) (bitswap 1.2.0)
      optional uint64 length = 5;   // in havelist this full block length (bitswap 1.2.0)
                                    // in sendlist this block part length (bitswap 1.2.0)
                                    
      optional bool hashset = 6;    // peer must send hashset in Block.cid (bitswap 1.2.0)
    }

    repeated Entry entries = 1;     // a list of wantlist entries
    optional bool full = 2;         // whether this is the full wantlist. default to false
  }

  message Block {
    optional bytes cid = 3;         // CID or HashSet (bitswap 1.2.0)
    optional uint64 offset = 4;     // offset in block (bitswap 1.2.0)
    optional bytes prefix = 1;      // CID prefix (cid version, multicodec and multihash prefix (type + length)
    optional bytes data = 2;        // full block or part of it
  }
  
  optional uint64 version = 4;      // bitswap version in first Message (value 1 = bitswap 1.2.0)
  
  optional Wantlist wantlist = 5;   // here our wantlist for peer. it must responce in havelist (bitswap 1.2.0)  
  optional Wantlist havelist = 6;   // here we send what we have from peer wantlist (bitswap 1.2.0)
  optional Wantlist sendlist = 1;   // here list of blocks that peer must send to us (wantlist in bitswap 1.1.0)
  
  repeated bytes blocks = 2;        // used to send Blocks in bitswap 1.0.0
  repeated Block payload = 3;       // used to send Blocks in bitswap 1.1.0
}
